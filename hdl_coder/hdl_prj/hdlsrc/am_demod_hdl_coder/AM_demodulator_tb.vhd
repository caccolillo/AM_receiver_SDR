-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/am_demod_hdl_coder/AM_demodulator_tb.vhd
-- Created: 2024-12-31 15:59:17
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-06
-- Target subsystem base rate: 1e-06
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Audio_out                     ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: AM_demodulator_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.float_pkg.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
USE work.AM_demodulator_tb_pkg.ALL;

ENTITY AM_demodulator_tb IS
END AM_demodulator_tb;


ARCHITECTURE rtl OF AM_demodulator_tb IS

  -- Component Declarations
  COMPONENT AM_demodulator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          AM_modulated_signal             :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          ce_out                          :   OUT   std_logic;
          Audio_out                       :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : AM_demodulator
    USE ENTITY work.AM_demodulator(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL clk_enable                       : std_logic;
  SIGNAL Audio_out_done                   : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL Audio_out_done_enb               : std_logic;  -- ufix1
  SIGNAL Audio_out_addr                   : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Audio_out_active                 : std_logic;  -- ufix1
  SIGNAL Sine_Wave_out1_addr              : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Sine_Wave_out1_active            : std_logic;  -- ufix1
  SIGNAL tb_enb_delay                     : std_logic;
  SIGNAL Sine_Wave_out1_enb               : std_logic;  -- ufix1
  SIGNAL Sine_Wave_out1_addr_delay_1      : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL rawData_AM_modulated_signal      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL holdData_AM_modulated_signal     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL AM_modulated_signal_offset       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL AM_modulated_signal              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL Audio_out                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Audio_out_enb                    : std_logic;  -- ufix1
  SIGNAL Audio_out_lastAddr               : std_logic;  -- ufix1
  SIGNAL Audio_out_addr_delay_1           : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Audio_out_expected               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Audio_out_ref                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Audio_out_testFailure            : std_logic;  -- ufix1

BEGIN
  u_AM_demodulator : AM_demodulator
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              AM_modulated_signal => AM_modulated_signal,  -- double
              ce_out => ce_out,
              Audio_out => Audio_out  -- double
              );

  Audio_out_done_enb <= Audio_out_done AND rdEnb;

  
  Audio_out_active <= '1' WHEN Audio_out_addr /= to_unsigned(16#1312D00#, 25) ELSE
      '0';

  
  Sine_Wave_out1_active <= '1' WHEN Sine_Wave_out1_addr /= to_unsigned(16#1312D00#, 25) ELSE
      '0';

  Sine_Wave_out1_enb <= Sine_Wave_out1_active AND (rdEnb AND tb_enb_delay);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 20000000
  SineWave_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sine_Wave_out1_addr <= to_unsigned(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF Sine_Wave_out1_enb = '1' THEN
        IF Sine_Wave_out1_addr >= to_unsigned(16#1312D00#, 25) THEN 
          Sine_Wave_out1_addr <= to_unsigned(16#0000000#, 25);
        ELSE 
          Sine_Wave_out1_addr <= Sine_Wave_out1_addr + to_unsigned(16#0000001#, 25);
        END IF;
      END IF;
    END IF;
  END PROCESS SineWave_process;


  Sine_Wave_out1_addr_delay_1 <= Sine_Wave_out1_addr AFTER 1 ns;

  -- Data source for AM_modulated_signal
  AM_modulated_signal_fileread: PROCESS (Sine_Wave_out1_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "AM_modulated_signal.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(63 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_AM_modulated_signal <= std_logic_vector(read_data(63 DOWNTO 0));
  END PROCESS AM_modulated_signal_fileread;

  -- holdData reg for Sine_Wave_out1
  stimuli_Sine_Wave_out1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_AM_modulated_signal <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_AM_modulated_signal <= rawData_AM_modulated_signal;
    END IF;
  END PROCESS stimuli_Sine_Wave_out1_process;

  stimuli_Sine_Wave_out1_1: PROCESS (rawData_AM_modulated_signal, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      AM_modulated_signal_offset <= holdData_AM_modulated_signal;
    ELSE
      AM_modulated_signal_offset <= rawData_AM_modulated_signal;
    END IF;
  END PROCESS stimuli_Sine_Wave_out1_1;

  AM_modulated_signal <= AM_modulated_signal_offset AFTER 2 ns;

  snkDonen <=  NOT check1_done;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  -- Delay inside enable generation: register depth 1
  u_enable_delay_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tb_enb_delay <= '0';
    ELSIF clk'event AND clk = '1' THEN
      tb_enb_delay <= tb_enb;
    END IF;
  END PROCESS u_enable_delay_process;

  
  rdEnb <= tb_enb_delay WHEN check1_done = '0' ELSE
      '0';

  clk_enable <= rdEnb AFTER 2 ns;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  Audio_out_enb <= ce_out AND Audio_out_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 20000000
  c_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Audio_out_addr <= to_unsigned(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF Audio_out_enb = '1' THEN
        IF Audio_out_addr >= to_unsigned(16#1312D00#, 25) THEN 
          Audio_out_addr <= to_unsigned(16#0000000#, 25);
        ELSE 
          Audio_out_addr <= Audio_out_addr + to_unsigned(16#0000001#, 25);
        END IF;
      END IF;
    END IF;
  END PROCESS c_4_process;


  
  Audio_out_lastAddr <= '1' WHEN Audio_out_addr >= to_unsigned(16#1312D00#, 25) ELSE
      '0';

  Audio_out_done <= Audio_out_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF Audio_out_done_enb = '1' THEN
        check1_done <= Audio_out_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  Audio_out_addr_delay_1 <= Audio_out_addr AFTER 1 ns;

  -- Data source for Audio_out_expected
  Audio_out_expected_fileread: PROCESS (Audio_out_addr_delay_1, tb_enb_delay, ce_out)
    FILE fp: TEXT open READ_MODE is "Audio_out_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(63 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    Audio_out_expected <= std_logic_vector(read_data(63 DOWNTO 0));
  END PROCESS Audio_out_expected_fileread;

  Audio_out_ref <= Audio_out_expected;

  Audio_out_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Audio_out_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND NOT isFloatDoubleEqual(Audio_out, Audio_out_ref, 9.9999999999999995e-08) THEN
        Audio_out_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in Audio_out: Expected " & to_hex(Audio_out_ref) & (" Actual " & to_hex(Audio_out))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS Audio_out_checker;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF check1_done = '1' THEN
        IF Audio_out_testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

