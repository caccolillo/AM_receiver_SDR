-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/am_demod_hdl_coder/AM_demodulator.vhd
-- Created: 2024-12-31 15:57:34
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-06
-- Target subsystem base rate: 1e-06
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Audio_out                     ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: AM_demodulator
-- Source Path: am_demod_hdl_coder/AM demodulator
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY AM_demodulator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        AM_modulated_signal               :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        ce_out                            :   OUT   std_logic;
        Audio_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
        );
END AM_demodulator;


ARCHITECTURE rtl OF AM_demodulator IS

  -- Component Declarations
  COMPONENT nfp_mul_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT LPF
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Input                           :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          Output                          :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_sqrt_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_sub_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_gain_pow2_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic;  -- ufix1
          nfp_in3                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_mul_double
    USE ENTITY work.nfp_mul_double(rtl);

  FOR ALL : LPF
    USE ENTITY work.LPF(rtl);

  FOR ALL : nfp_sqrt_double
    USE ENTITY work.nfp_sqrt_double(rtl);

  FOR ALL : nfp_sub_double
    USE ENTITY work.nfp_sub_double(rtl);

  FOR ALL : nfp_gain_pow2_double
    USE ENTITY work.nfp_gain_pow2_double(rtl);

  -- Signals
  SIGNAL Square_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL LPF_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sqrt_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL pw2_sign_const                   : std_logic;  -- ufix1
  SIGNAL pw2_shift_const                  : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Product_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64

BEGIN
  -- Fsample = 1 MHz
  -- Fpass =  50 KHz
  -- Fstop =  55 KHz

  u_nfp_mul_comp : nfp_mul_double
    PORT MAP( nfp_in1 => AM_modulated_signal,  -- double
              nfp_in2 => AM_modulated_signal,  -- double
              nfp_out => Square_out1  -- double
              );

  u_LPF : LPF
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Input => Square_out1,  -- double
              Output => LPF_out1  -- double
              );

  u_nfp_sqrt_comp : nfp_sqrt_double
    PORT MAP( nfp_in => LPF_out1,  -- double
              nfp_out => Sqrt_out1  -- double
              );

  u_nfp_sub_comp : nfp_sub_double
    PORT MAP( nfp_in1 => Sqrt_out1,  -- double
              nfp_in2 => Constant_out1,  -- double
              nfp_out => Sum_out1  -- double
              );

  u_nfp_gain_pow2_double : nfp_gain_pow2_double
    PORT MAP( nfp_in1 => Sum_out1,  -- double
              nfp_in2 => pw2_sign_const,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const),  -- sfix12
              nfp_out => Product_out1  -- double
              );

  Constant_out1 <= X"3fe6666666666666";

  pw2_sign_const <= '0';

  pw2_shift_const <= to_signed(16#001#, 12);

  ce_out <= clk_enable;

  Audio_out <= Product_out1;

END rtl;

