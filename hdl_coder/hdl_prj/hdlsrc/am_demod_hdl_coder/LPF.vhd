-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/am_demod_hdl_coder/LPF.vhd
-- Created: 2024-12-31 15:57:34
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LPF
-- Source Path: am_demod_hdl_coder/AM demodulator/LPF
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY LPF IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Input                             :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        Output                            :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
        );
END LPF;


ARCHITECTURE rtl OF LPF IS

  -- Component Declarations
  COMPONENT nfp_mul_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_sub_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_gain_pow2_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic;  -- ufix1
          nfp_in3                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_add_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_mul_double
    USE ENTITY work.nfp_mul_double(rtl);

  FOR ALL : nfp_sub_double
    USE ENTITY work.nfp_sub_double(rtl);

  FOR ALL : nfp_gain_pow2_double
    USE ENTITY work.nfp_gain_pow2_double(rtl);

  FOR ALL : nfp_add_double
    USE ENTITY work.nfp_add_double(rtl);

  -- Signals
  SIGNAL kconst                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL s_1_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_2                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_3                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay11_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay21_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL a_3_1_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL SumA31_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL a_2_1_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL SumA21_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL pw2_sign_const                   : std_logic;  -- ufix1
  SIGNAL pw2_shift_const                  : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL b_2_1_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL SumB21_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL SumB31_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL s_2_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_4                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_5                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay12_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay22_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL a_3_2_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL SumA32_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL a_2_2_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL SumA22_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL pw2_sign_const_1                 : std_logic;  -- ufix1
  SIGNAL pw2_shift_const_1                : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL b_2_2_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL SumB22_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL SumB32_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64

BEGIN
  u_nfp_mul_comp : nfp_mul_double
    PORT MAP( nfp_in1 => kconst_1,  -- double
              nfp_in2 => Input,  -- double
              nfp_out => s_1_out1  -- double
              );

  u_nfp_mul_comp_1 : nfp_mul_double
    PORT MAP( nfp_in1 => kconst_3,  -- double
              nfp_in2 => Delay21_out1,  -- double
              nfp_out => a_3_1_out1  -- double
              );

  u_nfp_mul_comp_2 : nfp_mul_double
    PORT MAP( nfp_in1 => kconst_2,  -- double
              nfp_in2 => Delay11_out1,  -- double
              nfp_out => a_2_1_out1  -- double
              );

  u_nfp_sub_comp : nfp_sub_double
    PORT MAP( nfp_in1 => s_1_out1,  -- double
              nfp_in2 => a_2_1_out1,  -- double
              nfp_out => SumA21_out1  -- double
              );

  u_nfp_sub_comp_1 : nfp_sub_double
    PORT MAP( nfp_in1 => SumA21_out1,  -- double
              nfp_in2 => a_3_1_out1,  -- double
              nfp_out => SumA31_out1  -- double
              );

  u_nfp_gain_pow2_double : nfp_gain_pow2_double
    PORT MAP( nfp_in1 => Delay11_out1,  -- double
              nfp_in2 => pw2_sign_const,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const),  -- sfix12
              nfp_out => b_2_1_out1  -- double
              );

  u_nfp_add_comp : nfp_add_double
    PORT MAP( nfp_in1 => SumA31_out1,  -- double
              nfp_in2 => b_2_1_out1,  -- double
              nfp_out => SumB21_out1  -- double
              );

  u_nfp_add_comp_1 : nfp_add_double
    PORT MAP( nfp_in1 => SumB21_out1,  -- double
              nfp_in2 => Delay21_out1,  -- double
              nfp_out => SumB31_out1  -- double
              );

  u_nfp_mul_comp_3 : nfp_mul_double
    PORT MAP( nfp_in1 => kconst,  -- double
              nfp_in2 => SumB31_out1,  -- double
              nfp_out => s_2_out1  -- double
              );

  u_nfp_mul_comp_4 : nfp_mul_double
    PORT MAP( nfp_in1 => kconst_5,  -- double
              nfp_in2 => Delay22_out1,  -- double
              nfp_out => a_3_2_out1  -- double
              );

  u_nfp_mul_comp_5 : nfp_mul_double
    PORT MAP( nfp_in1 => kconst_4,  -- double
              nfp_in2 => Delay12_out1,  -- double
              nfp_out => a_2_2_out1  -- double
              );

  u_nfp_sub_comp_2 : nfp_sub_double
    PORT MAP( nfp_in1 => s_2_out1,  -- double
              nfp_in2 => a_2_2_out1,  -- double
              nfp_out => SumA22_out1  -- double
              );

  u_nfp_sub_comp_3 : nfp_sub_double
    PORT MAP( nfp_in1 => SumA22_out1,  -- double
              nfp_in2 => a_3_2_out1,  -- double
              nfp_out => SumA32_out1  -- double
              );

  u_nfp_gain_pow2_double_1 : nfp_gain_pow2_double
    PORT MAP( nfp_in1 => Delay12_out1,  -- double
              nfp_in2 => pw2_sign_const_1,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const_1),  -- sfix12
              nfp_out => b_2_2_out1  -- double
              );

  u_nfp_add_comp_2 : nfp_add_double
    PORT MAP( nfp_in1 => SumA32_out1,  -- double
              nfp_in2 => b_2_2_out1,  -- double
              nfp_out => SumB22_out1  -- double
              );

  u_nfp_add_comp_3 : nfp_add_double
    PORT MAP( nfp_in1 => SumB22_out1,  -- double
              nfp_in2 => Delay22_out1,  -- double
              nfp_out => SumB32_out1  -- double
              );

  kconst <= X"3f937e64245b4d9f";

  kconst_1 <= X"3f9668b8720d20d3";

  kconst_2 <= X"bffb37266015c248";

  kconst_3 <= X"3fe93b63ce6d28aa";

  Delay21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay21_out1 <= X"0000000000000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay21_out1 <= Delay11_out1;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1 <= X"0000000000000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1 <= SumA31_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  pw2_sign_const <= '0';

  pw2_shift_const <= to_signed(16#001#, 12);

  kconst_4 <= X"bff7acbedf27431d";

  kconst_5 <= X"3fe1c94a42d9efef";

  Delay22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay22_out1 <= X"0000000000000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay22_out1 <= Delay12_out1;
      END IF;
    END IF;
  END PROCESS Delay22_process;


  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1 <= X"0000000000000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_out1 <= SumA32_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  pw2_sign_const_1 <= '0';

  pw2_shift_const_1 <= to_signed(16#001#, 12);

  Output <= SumB32_out1;

END rtl;

