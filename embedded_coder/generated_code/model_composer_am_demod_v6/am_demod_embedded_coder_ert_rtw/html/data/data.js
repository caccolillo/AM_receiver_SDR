var dataJson = {"arch":{"ispc":false,"isunix":true,"ismac":false},"build":"am_demod_embedded_coder","ref":false,"files":[{"name":"am_demod_embedded_coder.c","type":"source","group":"model","path":"/home/caccolillo/Documents/model_composer_am_demod_v6/am_demod_embedded_coder_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * File: am_demod_embedded_coder.c\n *\n * Code generated for Simulink model 'am_demod_embedded_coder'.\n *\n * Model version                  : 1.247\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Wed Jan  1 15:47:44 2025\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#include \"am_demod_embedded_coder.h\"\n#include \"am_demod_embedded_coder_private.h\"\n\n/* Block states (default storage) */\nDW_am_demod_embedded_coder_T am_demod_embedded_coder_DW;\n\n/* Real-time model */\nstatic RT_MODEL_am_demod_embedded_co_T am_demod_embedded_coder_M_;\nRT_MODEL_am_demod_embedded_co_T *const am_demod_embedded_coder_M =\n  &am_demod_embedded_coder_M_;\n\n/* Model step function */\nvoid am_demod_embedded_coder_step(void)\n{\n  real_T lastSin_tmp;\n  real_T rtb_Delay12;\n  real_T rtb_Product;\n  real_T rtb_Sqrt;\n\n  /* Sin: '<Root>/Sine Wave' */\n  if (am_demod_embedded_coder_DW.systemEnable != 0) {\n    lastSin_tmp = 1.0 * (((am_demod_embedded_coder_M->Timing.clockTick0+\n      am_demod_embedded_coder_M->Timing.clockTickH0* 4294967296.0)) * 1.0E-6);\n    am_demod_embedded_coder_DW.lastSin = sin(lastSin_tmp);\n    am_demod_embedded_coder_DW.lastCos = cos(lastSin_tmp);\n    am_demod_embedded_coder_DW.systemEnable = 0;\n  }\n\n  lastSin_tmp = am_demod_embedded_coder_DW.lastSin * 0.9999999999995;\n  rtb_Sqrt = ((am_demod_embedded_coder_DW.lastCos * (-9.999999999998333E-7) +\n               lastSin_tmp) * 0.9999999999995 +\n              (am_demod_embedded_coder_DW.lastCos * 0.9999999999995 -\n               am_demod_embedded_coder_DW.lastSin * (-9.999999999998333E-7)) *\n              9.999999999998333E-7) * 1.0 + 0.0;\n\n  /* End of Sin: '<Root>/Sine Wave' */\n\n  /* Sum: '<S2>/SumA31' incorporates:\n   *  Delay: '<S2>/Delay11'\n   *  Delay: '<S2>/Delay21'\n   *  Gain: '<S2>/a(2)(1)'\n   *  Gain: '<S2>/a(3)(1)'\n   *  Gain: '<S2>/s(1)'\n   *  Product: '<S1>/Square'\n   *  Sum: '<S2>/SumA21'\n   */\n  rtb_Sqrt = (rtb_Sqrt * rtb_Sqrt * 0.021883851967943024 - (-1.7009643319435259)\n              * am_demod_embedded_coder_DW.Delay11_DSTATE) - 0.788499739815298 *\n    am_demod_embedded_coder_DW.Delay21_DSTATE;\n\n  /* Delay: '<S2>/Delay12' */\n  rtb_Delay12 = am_demod_embedded_coder_DW.Delay12_DSTATE;\n\n  /* Sum: '<S2>/SumA32' incorporates:\n   *  Delay: '<S2>/Delay11'\n   *  Delay: '<S2>/Delay12'\n   *  Delay: '<S2>/Delay21'\n   *  Delay: '<S2>/Delay22'\n   *  Gain: '<S2>/a(2)(2)'\n   *  Gain: '<S2>/a(3)(2)'\n   *  Gain: '<S2>/b(2)(1)'\n   *  Gain: '<S2>/s(2)'\n   *  Sum: '<S2>/SumA22'\n   *  Sum: '<S2>/SumB21'\n   *  Sum: '<S2>/SumB31'\n   */\n  am_demod_embedded_coder_DW.Delay12_DSTATE = (((2.0 *\n    am_demod_embedded_coder_DW.Delay11_DSTATE + rtb_Sqrt) +\n    am_demod_embedded_coder_DW.Delay21_DSTATE) * 0.019036831587823873 -\n    (-1.4796742169311934) * am_demod_embedded_coder_DW.Delay12_DSTATE) -\n    0.555821543282489 * am_demod_embedded_coder_DW.Delay22_DSTATE;\n\n  /* Product: '<S1>/Product' incorporates:\n   *  Constant: '<S1>/Constant'\n   *  Constant: '<S1>/Constant1'\n   *  Delay: '<S2>/Delay12'\n   *  Delay: '<S2>/Delay22'\n   *  Gain: '<S2>/b(2)(2)'\n   *  Sqrt: '<S1>/Sqrt'\n   *  Sum: '<S1>/Sum'\n   *  Sum: '<S2>/SumB22'\n   *  Sum: '<S2>/SumB32'\n   */\n  rtb_Product = (sqrt((2.0 * rtb_Delay12 +\n                       am_demod_embedded_coder_DW.Delay12_DSTATE) +\n                      am_demod_embedded_coder_DW.Delay22_DSTATE) - 0.7) * 2.0;\n\n  /* Update for Delay: '<S2>/Delay22' */\n  am_demod_embedded_coder_DW.Delay22_DSTATE = rtb_Delay12;\n\n  /* Update for Delay: '<S2>/Delay21' incorporates:\n   *  Delay: '<S2>/Delay11'\n   */\n  am_demod_embedded_coder_DW.Delay21_DSTATE =\n    am_demod_embedded_coder_DW.Delay11_DSTATE;\n\n  /* Update for Sin: '<Root>/Sine Wave' */\n  rtb_Delay12 = am_demod_embedded_coder_DW.lastSin;\n  am_demod_embedded_coder_DW.lastSin = am_demod_embedded_coder_DW.lastCos *\n    9.999999999998333E-7 + lastSin_tmp;\n  am_demod_embedded_coder_DW.lastCos = am_demod_embedded_coder_DW.lastCos *\n    0.9999999999995 - rtb_Delay12 * 9.999999999998333E-7;\n\n  /* Update for Delay: '<S2>/Delay11' */\n  am_demod_embedded_coder_DW.Delay11_DSTATE = rtb_Sqrt;\n\n  /* Update absolute time for base rate */\n  /* The \"clockTick0\" counts the number of times the code of this task has\n   * been executed. The resolution of this integer timer is 1.0E-6, which is the step size\n   * of the task. Size of \"clockTick0\" ensures timer will not overflow during the\n   * application lifespan selected.\n   * Timer of this task consists of two 32 bit unsigned integers.\n   * The two integers represent the low bits Timing.clockTick0 and the high bits\n   * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.\n   */\n  am_demod_embedded_coder_M->Timing.clockTick0++;\n  if (!am_demod_embedded_coder_M->Timing.clockTick0) {\n    am_demod_embedded_coder_M->Timing.clockTickH0++;\n  }\n}\n\n/* Model initialize function */\nvoid am_demod_embedded_coder_initialize(void)\n{\n  /* Enable for Sin: '<Root>/Sine Wave' */\n  am_demod_embedded_coder_DW.systemEnable = 1;\n}\n\n/* Model terminate function */\nvoid am_demod_embedded_coder_terminate(void)\n{\n  /* (no terminate code required) */\n}\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"am_demod_embedded_coder.h","type":"header","group":"model","path":"/home/caccolillo/Documents/model_composer_am_demod_v6/am_demod_embedded_coder_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * File: am_demod_embedded_coder.h\n *\n * Code generated for Simulink model 'am_demod_embedded_coder'.\n *\n * Model version                  : 1.247\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Wed Jan  1 15:47:44 2025\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_am_demod_embedded_coder_h_\n#define RTW_HEADER_am_demod_embedded_coder_h_\n#include <math.h>\n#ifndef am_demod_embedded_coder_COMMON_INCLUDES_\n#define am_demod_embedded_coder_COMMON_INCLUDES_\n#include \"rtwtypes.h\"\n#endif                            /* am_demod_embedded_coder_COMMON_INCLUDES_ */\n\n#include \"am_demod_embedded_coder_types.h\"\n\n/* Macros for accessing real-time model data structure */\n#ifndef rtmGetErrorStatus\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\n#endif\n\n#ifndef rtmSetErrorStatus\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\n#endif\n\n/* Block states (default storage) for system '<Root>' */\ntypedef struct {\n  real_T Delay22_DSTATE;               /* '<S2>/Delay22' */\n  real_T Delay21_DSTATE;               /* '<S2>/Delay21' */\n  real_T Delay11_DSTATE;               /* '<S2>/Delay11' */\n  real_T Delay12_DSTATE;               /* '<S2>/Delay12' */\n  real_T lastSin;                      /* '<Root>/Sine Wave' */\n  real_T lastCos;                      /* '<Root>/Sine Wave' */\n  int32_T systemEnable;                /* '<Root>/Sine Wave' */\n} DW_am_demod_embedded_coder_T;\n\n/* Real-time Model Data Structure */\nstruct tag_RTM_am_demod_embedded_cod_T {\n  const char_T * volatile errorStatus;\n\n  /*\n   * Timing:\n   * The following substructure contains information regarding\n   * the timing information for the model.\n   */\n  struct {\n    uint32_T clockTick0;\n    uint32_T clockTickH0;\n  } Timing;\n};\n\n/* Block states (default storage) */\nextern DW_am_demod_embedded_coder_T am_demod_embedded_coder_DW;\n\n/* Model entry point functions */\nextern void am_demod_embedded_coder_initialize(void);\nextern void am_demod_embedded_coder_step(void);\nextern void am_demod_embedded_coder_terminate(void);\n\n/* Real-time Model object */\nextern RT_MODEL_am_demod_embedded_co_T *const am_demod_embedded_coder_M;\n\n/*-\n * The generated code includes comments that allow you to trace directly\n * back to the appropriate location in the model.  The basic format\n * is <system>/block_name, where system is the system number (uniquely\n * assigned by Simulink) and block_name is the name of the block.\n *\n * Use the MATLAB hilite_system command to trace the generated code back\n * to the model.  For example,\n *\n * hilite_system('<S3>')    - opens system 3\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\n *\n * Here is the system hierarchy for this model\n *\n * '<Root>' : 'am_demod_embedded_coder'\n * '<S1>'   : 'am_demod_embedded_coder/AM demodulator'\n * '<S2>'   : 'am_demod_embedded_coder/AM demodulator/LPF'\n */\n#endif                               /* RTW_HEADER_am_demod_embedded_coder_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"am_demod_embedded_coder_private.h","type":"header","group":"model","path":"/home/caccolillo/Documents/model_composer_am_demod_v6/am_demod_embedded_coder_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * File: am_demod_embedded_coder_private.h\n *\n * Code generated for Simulink model 'am_demod_embedded_coder'.\n *\n * Model version                  : 1.247\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Wed Jan  1 15:47:44 2025\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_am_demod_embedded_coder_private_h_\n#define RTW_HEADER_am_demod_embedded_coder_private_h_\n#include \"rtwtypes.h\"\n#endif                       /* RTW_HEADER_am_demod_embedded_coder_private_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"am_demod_embedded_coder_types.h","type":"header","group":"model","path":"/home/caccolillo/Documents/model_composer_am_demod_v6/am_demod_embedded_coder_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * File: am_demod_embedded_coder_types.h\n *\n * Code generated for Simulink model 'am_demod_embedded_coder'.\n *\n * Model version                  : 1.247\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Wed Jan  1 15:47:44 2025\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_am_demod_embedded_coder_types_h_\n#define RTW_HEADER_am_demod_embedded_coder_types_h_\n\n/* Model Code Variants */\n\n/* Forward declaration for rtModel */\ntypedef struct tag_RTM_am_demod_embedded_cod_T RT_MODEL_am_demod_embedded_co_T;\n\n#endif                         /* RTW_HEADER_am_demod_embedded_coder_types_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"/home/caccolillo/Documents/model_composer_am_demod_v6/am_demod_embedded_coder_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * File: rtwtypes.h\n *\n * Code generated for Simulink model 'am_demod_embedded_coder'.\n *\n * Model version                  : 1.247\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Wed Jan  1 15:47:44 2025\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTWTYPES_H\n#define RTWTYPES_H\n\n/* Logical type definitions */\n#if (!defined(__cplusplus))\n#ifndef false\n#define false                          (0U)\n#endif\n\n#ifndef true\n#define true                           (1U)\n#endif\n#endif\n\n/*=======================================================================*\n * Target hardware information\n *   Device type: ARM Compatible->ARM Cortex\n *   Number of bits:     char:   8    short:   16    int:  32\n *                       long:  32\n *                       native word size:  32\n *   Byte ordering: LittleEndian\n *   Signed integer division rounds to: Zero\n *   Shift right on a signed integer as arithmetic shift: on\n *=======================================================================*/\n#ifdef PORTABLE_WORDSIZES              /* PORTABLE_WORDSIZES defined */\n\n/*=======================================================================*\n * Host information\n *   Number of bits:     char:   8    short:   16    int:  32\n *                       long:  64\n *                       long long:  64\n *                       native word size:  64\n *=======================================================================*/\n\n/*=======================================================================*\n * Fixed width word size data types:                                     *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\n *=======================================================================*/\ntypedef signed char int8_T;\ntypedef unsigned char uint8_T;\ntypedef short int16_T;\ntypedef unsigned short uint16_T;\ntypedef int int32_T;\ntypedef unsigned int uint32_T;\ntypedef float real32_T;\ntypedef double real64_T;\n\n/*===========================================================================*\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\n *                           real_T, time_T, ulong_T.                        *\n *===========================================================================*/\ntypedef double real_T;\ntypedef double time_T;\ntypedef unsigned char boolean_T;\ntypedef int int_T;\ntypedef unsigned int uint_T;\ntypedef unsigned int ulong_T;\ntypedef char char_T;\ntypedef unsigned char uchar_T;\ntypedef char_T byte_T;\n\n#else                                  /* PORTABLE_WORDSIZES not defined */\n\n/*=======================================================================*\n * Fixed width word size data types:                                     *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\n *=======================================================================*/\ntypedef signed char int8_T;\ntypedef unsigned char uint8_T;\ntypedef short int16_T;\ntypedef unsigned short uint16_T;\ntypedef int int32_T;\ntypedef unsigned int uint32_T;\ntypedef float real32_T;\ntypedef double real64_T;\n\n/*===========================================================================*\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\n *                           real_T, time_T, ulong_T.                        *\n *===========================================================================*/\ntypedef double real_T;\ntypedef double time_T;\ntypedef unsigned char boolean_T;\ntypedef int int_T;\ntypedef unsigned int uint_T;\ntypedef unsigned long ulong_T;\ntypedef char char_T;\ntypedef unsigned char uchar_T;\ntypedef char_T byte_T;\n\n#endif                                 /* PORTABLE_WORDSIZES */\n\n/*===========================================================================*\n * Complex number type definitions                                           *\n *===========================================================================*/\n#define CREAL_T\n\ntypedef struct {\n  real32_T re;\n  real32_T im;\n} creal32_T;\n\ntypedef struct {\n  real64_T re;\n  real64_T im;\n} creal64_T;\n\ntypedef struct {\n  real_T re;\n  real_T im;\n} creal_T;\n\n#define CINT8_T\n\ntypedef struct {\n  int8_T re;\n  int8_T im;\n} cint8_T;\n\n#define CUINT8_T\n\ntypedef struct {\n  uint8_T re;\n  uint8_T im;\n} cuint8_T;\n\n#define CINT16_T\n\ntypedef struct {\n  int16_T re;\n  int16_T im;\n} cint16_T;\n\n#define CUINT16_T\n\ntypedef struct {\n  uint16_T re;\n  uint16_T im;\n} cuint16_T;\n\n#define CINT32_T\n\ntypedef struct {\n  int32_T re;\n  int32_T im;\n} cint32_T;\n\n#define CUINT32_T\n\ntypedef struct {\n  uint32_T re;\n  uint32_T im;\n} cuint32_T;\n\n/*=======================================================================*\n * Min and Max:                                                          *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *=======================================================================*/\n#define MAX_int8_T                     ((int8_T)(127))\n#define MIN_int8_T                     ((int8_T)(-128))\n#define MAX_uint8_T                    ((uint8_T)(255U))\n#define MAX_int16_T                    ((int16_T)(32767))\n#define MIN_int16_T                    ((int16_T)(-32768))\n#define MAX_uint16_T                   ((uint16_T)(65535U))\n#define MAX_int32_T                    ((int32_T)(2147483647))\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\n\n/* Block D-Work pointer type */\ntypedef void * pointer_T;\n\n#endif                                 /* RTWTYPES_H */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"/home/caccolillo/Documents/model_composer_am_demod_v6/am_demod_embedded_coder_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\n * File: rtmodel.h\n *\n * Code generated for Simulink model 'am_demod_embedded_coder'.\n *\n * Model version                  : 1.247\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Wed Jan  1 15:47:44 2025\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_rtmodel_h_\n#define RTW_HEADER_rtmodel_h_\n#include \"am_demod_embedded_coder.h\"\n\n/* Macros generated for backwards compatibility  */\n#ifndef rtmGetStopRequested\n#define rtmGetStopRequested(rtm)       ((void*) 0)\n#endif\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};